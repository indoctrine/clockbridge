variables:
  DOCKER_HOST: tcp://$CI_DEPLOY_SERVER:2375/
  DOCKER_TLS_CERTDIR: ""
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CLOCKBRIDGE_CONFIG_DIR: /docker-data/clockbridge
  # Enable full output in job log
  FF_SCRIPT_SECTIONS: 1


# Ensure docker is working on the Gitlab runner
default:
  before_script:
    - docker info

docker-build:
  stage: build
  environment: development
  image: docker:stable
  services:
    - name: docker:stable-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - >
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

test-code:
    stage: test
    image: python:3.12
    cache:
      paths:
        - .cache/pip
    before_script:
        - python3 -m pip install pytest
        - python3 -m pip install -r requirements.txt
        - export PYTHONPATH=$(pwd)
        - export CLOCKBRIDGE_CONFIG_PATH=tests/testConfig.yaml
    script:
        - pytest --junitxml tests/results.xml tests/

deploy-dev:
  stage: deploy
  environment: development
  image: docker:stable
  services:
    - name: docker:stable-dind
  needs:
   - docker-build
   - test-code
  before_script:
    - apk update 
    - apk add curl
  script:
    - >
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker pull $CI_REGISTRY_IMAGE:latest
        docker rm -f clockbridge || true
        docker run -d -p 5000:5000 -v /docker-data/clockbridge:/config --restart always --name clockbridge $CI_REGISTRY_IMAGE:latest
      else
        docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
        docker rm -f clockbridge || true
        docker run -d -p 5000:5000 -v /docker-data/clockbridge:/config --restart always --name clockbridge $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
      fi
    - echo $CI_DEPLOY_SERVER
    - env
    - '[ "$( curl -q ${CI_DEPLOY_SERVER}:5000/ping )" = "Pong" ]'
  after_script:
    - docker rmi $(docker images -f dangling=true -f reference=$CI_REGISTRY_IMAGE -q)
  tags:
    - deploy

deploy-prod:
  stage: deploy
  environment: production
  allow_failure: false
  image: docker:stable
  services:
    - name: docker:stable-dind
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs: 
    - deploy-dev
  before_script:
    - apk update 
    - apk add curl
  script:
    - >
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker pull $CI_REGISTRY_IMAGE:latest
        docker rm -f clockbridge || true
        docker run -d -p 5000:5000 -v $CLOCKBRIDGE_CONFIG_DIR:/config --restart always --name clockbridge $CI_REGISTRY_IMAGE:latest
      else
        docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
        docker rm -f clockbridge || true
        docker run -d -p 5000:5000 -v $CLOCKBRIDGE_CONFIG_DIR:/config --restart always --name clockbridge $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
      fi
    - '[ "$( curl -q ${CI_DEPLOY_SERVER}:5000/ping )" = "Pong" ]'
  after_script:
    - docker rmi $(docker images -f dangling=true -f reference=$CI_REGISTRY_IMAGE -q)
  tags:
    - deploy
